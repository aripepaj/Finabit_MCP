name: Release MCP

on:
  push:
    tags:
      - 'mcp-v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "pyinstaller>=6.6"

      - name: Show tool versions
        shell: pwsh
        run: |
          python -V
          pip -V
          pyinstaller --version

      - name: Determine tag
        id: vars
        shell: bash
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      # Build as ONE logical command to avoid fragile PowerShell backticks
      - name: Build executable
        shell: pwsh
        run: >
          pyinstaller --noconfirm --onefile main.py --name FinabitMCP
          --add-data "static;static"
          --add-data "manifest.json;."
          --add-data ".env.template;."
          --add-data "keys/public.pem;keys"
          --collect-all "app"
          --collect-submodules "app"
          --collect-all "fastmcp"
          --copy-metadata "fastmcp"
          --hidden-import "fastmcp"
          --log-level DEBUG
          --clean

      - name: Verify build output
        shell: pwsh
        run: |
          if (-not (Test-Path 'dist\FinabitMCP.exe')) {
            Write-Error 'dist\FinabitMCP.exe not found after build.'
          }

      - name: Upload EXE artifact (debug)
        uses: actions/upload-artifact@v4
        with:
          name: FinabitMCP-exe
          path: dist/FinabitMCP.exe

      - name: Create ZIP
        id: zip
        shell: pwsh
        run: |
          $zip = "FinabitMCP_${{ steps.vars.outputs.TAG }}_win.zip"
          Compress-Archive -Path dist\FinabitMCP.exe -DestinationPath $zip
          "ZIP_NAME=$zip" >> $env:GITHUB_OUTPUT

      - name: SHA256
        id: sha
        shell: pwsh
        run: |
          $sha = (Get-FileHash -Algorithm SHA256 "${{ steps.zip.outputs.ZIP_NAME }}").Hash
          Set-Content -Path "${{ steps.zip.outputs.ZIP_NAME }}.sha256" -Value $sha -Encoding ascii
          "SHA=$sha" >> $env:GITHUB_OUTPUT

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.TAG }}
          name: MCP ${{ steps.vars.outputs.TAG }}
          body: |
            Automated release for ${{ steps.vars.outputs.TAG }}.
            SHA256: ${{ steps.sha.outputs.SHA }}
          draft: false
          prerelease: false
          files: |
            ${{ steps.zip.outputs.ZIP_NAME }}
            ${{ steps.zip.outputs.ZIP_NAME }}.sha256
          generate_release_notes: true
          make_latest: true
